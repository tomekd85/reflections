git rm <file> 					** removes file from local repository and marks file for removal in staged area
git reset HEAD <file> 				** removes file removal from staging area
git checkout -- second.txt 			** restores file removed with git rm , git reset HEAD <file> must be run before
git diff --staged 				** compares repository with staged files
git diff 					** compares repository with local files

git log -p -2 					** shows last 2 commits with detailed changes
git log --stat					** shows statistics: deletions insertions
git log --pretty=format:"%h -%an, %ar : %s"	** displays log in customized fashion
git log --graph					** displays graph

git commit --amend				** makes the same commit for the second time. Takes into account your current staging area

git remote -v					** displays remote repositories

git remote add remote_name https://github.com...** add remote to your repo

git fetch remote_name				** fetch data from remote name. remote_name/master is master branch on remote repo

git fetch origin				** fetches data from origin. origin is remote_name after you made git clone

git remote show origin				** fetches information about origin and tracked branches

git remote rename remote_name new_name		** changes the shortname(remote_name) of remote to new_name 

git remote rm remote_name			** removes remote repo

git tag						** lists all tagged version. Tags are added if you want to mark a specific version in history

git show <tag>					** shows the commit from the tag

git tag -a v.1.4 -m "tag message"		** creates annotated tag

git tag v.1.4-lw				** creates lightweight tag

git tag -a v1.2 <commit_id>			** tag previous commit

git push origin <tag_name>			** <tag_name> is v.1.4. pushes tag to remote. If we don't specify it explicitly it won't be pushed to the remote repo

git checkout -b <branchname> <tag_name>		** we can't checkout the tag beacause they can move. We can only create new branch with the specific tag

git config --global alias.last 'log -1 HEAD'	** creates alias for new command in git. Now running "git last" calls "git log -1 HEAD"

git branch testing				** creates new branch. Branch is a pointer to specific commit


git log --oneline --decoreate			** decorate displays where the HEAD is pointing

HEAD is a pointer to the local branch I'm currently on

git checkout testing				** switches to branch testing. Moves head to testing

git log --oneline --decorate --graph --all	** displays the graph of all commits

git checkout -b <branch_name>			** creates new branch and makes checkout on it

git checkout master
git merge b1					** assuming I'm in branch b1. I can merge changes with master with git merge b1

git branch -d b1				** after merge branches are aligned. I can delete b1

git merge b1 !!! confict occurs next steps are :
git status
vim <conficted_file>
git add <conflicted_file>			** marks file as with resolved conflict
git commit					** merged commit

git branch					** displays available branches
git branch -v					** with last commit message

git branch --merged
git branch --no-merged

test commit - to delete


